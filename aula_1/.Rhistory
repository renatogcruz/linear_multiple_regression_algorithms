##################################################################################
# Visualizando a base de dados
empresas %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
#Estimando a RegressÃ£o MÃºltipla
modelo_empresas <- lm(formula = retorno ~ . - empresa,
data = empresas)
#ParÃ¢metros do modelo
summary(modelo_empresas)
##################################################################################
#                                 PROCEDIMENTO STEPWISE                          #
##################################################################################
#Aplicando o procedimento Stepwise, temos o seguinte código:
step_empresas <- step(modelo_empresas, k = 3.841459)
#De onde vem o argumento k = 3.841459?
qchisq(p = 0.05, df = 1, lower.tail = F)
round(pchisq(3.841459, df = 1, lower.tail = F),7)
summary(step_empresas)
export_summs(step_empresas, scale = F, digits = 5)
#Parâmetros reais do modelo com procedimento Stepwise
confint(step_empresas, level = 0.95) # siginificÃ¢ncia 5%
plot_summs(step_empresas, colors = "#440154FF") #funÃ§Ã£o plot_summs do pacote ggstance
#Parâmetros padronizados
plot_summs(step_empresas, scale = TRUE, colors = "#440154FF")
#Adicionando a caracterizaÃ§Ã£o da distribiÃ§Ã£o normal no IC de cada parÃ¢metro beta
plot_summs(step_empresas, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#440154FF")
#Comparando os ICs dos betas dos modelos sem e com procedimento Stepwise
plot_summs(modelo_empresas, step_empresas, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#FDE725FF", "#440154FF"))
##################################################################################
#          TESTE DE VERIFICAÇÃO DA ADERÊNCIA DOS RESÍDUOS À NORMALIDADE          #
#                               SHAPIRO-FRANCIA                                  #
##################################################################################
#Shapiro-Francia: n > 30
sf.test(step_empresas$residuals) #função sf.test do pacote nortest
#Plotando os resíduos do modelo step_empresas
empresas %>%
mutate(residuos = step_empresas$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#440154FF",
bins = 30,
alpha = 0.6) +
labs(x = "ResÃ­duos",
y = "FrequÃªncia") +
theme_bw()
#Plotando os resíduos do modelo step_empresas
empresas %>%
mutate(residuos = step_empresas$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#440154FF",
bins = 30,
alpha = 0.6) +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Acrescentando uma curva normal teórica para comparação entre as distribuições
empresas %>%
mutate(residuos = step_empresas$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_empresas$residuals),
sd = sd(step_empresas$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
##################################################################################
#                            TRANSFORMAÇÃO DE BOX-COX                            #
##################################################################################
#Para calcular o lambda de Box-Cox
lambda_BC <- powerTransform(empresas$retorno) #função powerTransform do pacote car#
lambda_BC
#Visualizando a nova variÃ¡vel na base de dados
empresas %>%
select(empresa, retorno, bcretorno, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 16)
#Estimando um novo modelo mÃºltiplo com variÃ¡vel dependente transformada por Box-Cox
modelo_bc <- lm(formula = bcretorno ~ . -empresa -retorno,
data = empresas)
#ParÃ¢metros do modelo
summary(modelo_bc)
#Inserindo o lambda de Box-Cox na base de dados para a estimaÃ§Ã£o de um novo modelo
empresas$bcretorno <- (((empresas$retorno ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
#Visualizando a nova variÃ¡vel na base de dados
empresas %>%
select(empresa, retorno, bcretorno, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 16)
#Estimando um novo modelo mÃºltiplo com variÃ¡vel dependente transformada por Box-Cox
modelo_bc <- lm(formula = bcretorno ~ . -empresa -retorno,
data = empresas)
#Parâmetros do modelo
summary(modelo_bc)
#Aplicando o procedimento Stepwise
step_modelo_bc <- step(modelo_bc, k = 3.841459)
summary(step_modelo_bc)
summary(step_modelo_bc)
#Verificando a normalidade dos resíduos do modelo step_modelo_bc
sf.test(step_modelo_bc$residuals) #função sf.test do pacote nortest
#Plotando os novos resíduos do step_modelo_bc
empresas %>%
mutate(residuos = step_modelo_bc$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_modelo_bc$residuals),
sd = sd(step_modelo_bc$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "ResÃ­duos",
y = "FrequÃªncia") +
theme_bw()
#Plotando os novos resíduos do step_modelo_bc
empresas %>%
mutate(residuos = step_modelo_bc$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_modelo_bc$residuals),
sd = sd(step_modelo_bc$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Resumo dos dois modelos obtidos pelo procedimento Stepwise (linear e com Box-Cox)
#FunÃ§Ã£o export_summs do pacote jtools
export_summs(step_empresas, step_modelo_bc, scale = F, digits = 6)
#Parâmetros reais do modelo com procedimento Stepwise e Box-Cox
confint(step_modelo_bc, level = 0.95) # siginificÃ¢ncia 5%
plot_summs(step_modelo_bc, colors = "#287D8EFF") #funÃ§Ã£o plot_summs do pacote ggstance
#Parâmetros padronizados
plot_summs(step_modelo_bc, scale = TRUE, colors = "#287D8EFF")
#Adicionando caracterização da distribuíção normal no IC de cada parâmetro beta
plot_summs(step_modelo_bc, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#287D8EFF")
#Comparando os ICs do betas dos modelos sem e com TransformaÃ§Ã£o de Box-Cox
plot_summs(step_empresas, step_modelo_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
#Fazendo predições com o step_modelo_bc, e.g.: qual é o valor do retorno, em
#média, para disclosure igual a 50, liquidez igual a 14 e ativo igual a 4000,
#ceteris paribus?
predict(object = step_modelo_bc,
data.frame(disclosure = 50,
liquidez = 14,
ativos = 4000),
interval = "confidence", level = 0.95)
#NÃo podemos nos esquecer de fazer o cálculo para a obtenção do fitted
#value de Y (retorno)
(((3.702015 * -0.02256414) + 1)) ^ (1 / -0.02256414)
#Salvando os fitted values dos modelos step_empresas e step_modelo_bc no
#dataset empresas
empresas$yhat_step_empresas <- step_empresas$fitted.values
empresas$yhat_step_modelo_bc <- (((step_modelo_bc$fitted.values*(lambda_BC$lambda))+
1))^(1/(lambda_BC$lambda))
#Visualizando os dois fitted values no dataset
#modelos step_empresas e step_modelo_bc
empresas %>%
select(empresa, retorno, yhat_step_empresas, yhat_step_modelo_bc) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
#Ajustes dos modelos: valores previstos (fitted values) X valores reais
empresas %>%
ggplot() +
geom_smooth(aes(x = retorno, y = yhat_step_empresas, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = retorno, y = yhat_step_empresas),
color = "#440154FF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = retorno, y = yhat_step_modelo_bc, color = "Stepwise Box-Cox"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = retorno, y = yhat_step_modelo_bc),
color = "#287D8EFF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = retorno, y = retorno), method = "lm",
color = "grey30", size = 1.05,
linetype = "longdash") +
scale_color_manual("Modelos:",
values = c("#287D8EFF", "#440154FF")) +
labs(x = "Retorno", y = "Fitted Values") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
##################################################################################
#                 INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load("salarios.RData")
load("salarios.RData")
View(salarios)
#EstatÃ­sticas univariadas
summary(salarios)
##CORRELAÃÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
salarios %>% select(2:4) %>%
correlation(method = "pearson") %>%
plot()
modelo1 <- lm(formula = salario ~ rh1 + econometria1,
data = salarios)
summary(modelo1)
##################################################################################
#                 INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
2+5
load("salarios.RData")
#Estatásticas univariadas
summary(salarios)
##CORRELAÇÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
modelo1 <- lm(formula = salario ~ rh1 + econometria1,
data = salarios)
summary(modelo1)
##CORRELAÇÃO BAIXA:
cor(salarios$rh3, salarios$econometria3)
modelo3 <- lm(formula = salario ~ rh3 + econometria3,
data = salarios)
summary(modelo3)
#DiagnÃ³stico de multicolinearidade (Variance Inflation Factor e Tolerance)
ols_vif_tol(modelo3)
##CORRELAÇÃO MUITO ALTA, PORÉM NÃO PERFEITA:
cor(salarios$rh2, salarios$econometria2)
modelo2 <- lm(formula = salario ~ rh2 + econometria2,
data = salarios)
summary(modelo2)
ols_vif_tol(modelo2)
load(file = "saeb_rend.RData")
View(saeb_rend)
#Estatísticas univariadas
summary(saeb_rend)
saeb_rend$codigo <- as.character(saeb_rend$codigo)
#Estatísticas univariadas
summary(saeb_rend)
saeb_rend$rede <- as.factor(saeb_rend$rede)
#Estatísticas univariadas
summary(saeb_rend)
#Tabela de frequências absolutas das variáveis 'uf' e rede'
table(saeb_rend$uf)
table(saeb_rend$rede)
#Plotando saeb em funÃ§Ã£o de rendimento, com linear fit
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb)) +
geom_point(size = 1, color = "#FDE725FF") +
geom_smooth(method = "lm",
color = "grey40", se = F) +
xlab("rendimento") +
ylab("saeb") +
theme_classic()
)
#Plotando saeb em funÃçãoo de rendimento, com destaque para rede escolar
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÃSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#EstimaÃção do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
saeb_rend_dummies_uf <- dummy_columns(.data = saeb_rend,
select_columns = "uf",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
View(saeb_rend_dummies_uf)
##################################################################################
#             ESTIMAÇÃO DO MODELO DE REGRESSÃO MÚLTIPLA COM DUMMIES E            #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Modelo considerando as UF's
modelosaeb_dummies_uf <- lm(formula = saeb ~ . -municipio -codigo -escola -rede,
data = saeb_rend_dummies_uf)
summary(modelosaeb_dummies_uf)
#Teste de Breusch-Pagan para diagnÃ³stico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb_dummies_uf)
load(file = "planosaude.RData")
##################################################################################
#              OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude                 #
##################################################################################
glimpse(planosaude)
View(planosaude)
#Estatísticas univariadas
summary(planosaude)
#Categorias da variÃ¡vel 'plano'
levels(factor(planosaude$plano))
#Tabela de frequências absolutas da variável 'plano'
table(planosaude$plano)
chart.Correlation((planosaude[2:5]), histogram = TRUE)
planosaude_dummies <- dummy_columns(.data = planosaude,
select_columns = "plano",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
#Visualizando a base de dados dummizada
planosaude_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 19)
#Visualizando a base de dados dummizada
planosaude_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
##################################################################################
#                       ESTIMAÇÃO DA REGRESSÃO LINEAR MÚLTIPLA                   #
##################################################################################
#Modelagem com todas as variÃ¡veis
modelo_planosaude <- lm(despmed ~ . - id, planosaude_dummies)
#ParÃ¢metros do modelo_planosaude
summary(modelo_planosaude)
step_planosaude <- step(modelo_planosaude, k = 3.841459)
summary(step_planosaude)
#Teste de Shapiro-Francia
sf.test(step_planosaude$residuals) #função sf.test do pacote nortest
#Plotando os resíduos do modelo step_planosaude
planosaude %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
labs(x = "Resíduos",
y = "Frequências") +
theme_bw()
#Acrescentando uma curva normal teórica para comparação entre as distribuições
planosaude %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_planosaude$residuals),
sd = sd(step_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "ResÃ­duos",
y = "FrequÃªncia") +
theme_bw()
#Kernel density estimation (KDE) - forma não-paramêtrica para estimar a
#função densidade de probabilidade de uma variável aleatória
planosaude_dummies %>%
ggplot() +
geom_density(aes(x = step_planosaude$residuals), fill = "#55C667FF") +
labs(x = "Resíduos do Modelo Stepwise",
y = "Densidade") +
theme_bw()
#Teste de Breusch-Pagan para diagnÃ³stico de heterocedasticidade
ols_test_breusch_pagan(step_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step <- step_planosaude$fitted.values
planosaude_dummies$residuos_step <- step_planosaude$residuals
#GrÃ¡fico que relaciona resíduos e fitted values do modelo 'step_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step, y = residuos_step),
color = "#55C667FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise",
y = "ResÃ­duos do Modelo Stepwise") +
theme_bw()
#Gráfico que relaciona resíduos e fitted values do modelo 'step_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step, y = residuos_step),
color = "#55C667FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise",
y = "Resíduos do Modelo Stepwise") +
theme_bw()
##################################################################################
#                              TRANSFORMAçÃO DE BOX-COX                          #
##################################################################################
#Para calcular o lambda de Box-Cox
lambda_BC <- powerTransform(planosaude$despmed)
lambda_BC
#Inserindo o lambda de Box-Cox na nova base de dados para a estimaÃ§Ã£o de um
#novo modelo
planosaude_dummies$bcdespmed <- (((planosaude$despmed ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
#Visualizando a nova variÃ¡vel na base de dados
planosaude_dummies %>%
select(id, despmed, bcdespmed, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 14)
#Visualizando a nova variÃ¡vel na base de dados
planosaude_dummies %>%
select(id, despmed, bcdespmed, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Estimando um novo modelo múltiplo com dummies
modelo_bc_planosaude <- lm(formula = bcdespmed ~ . -id -despmed -fitted_step
-residuos_step,
data = planosaude_dummies)
#Aplicando o procedimento Stepwise
step_bc_planosaude <- step(modelo_bc_planosaude, k = 3.841459)
summary(step_bc_planosaude)
#Verificando a normalidade dos resíduos do modelo step_bc_planosaude
#Teste de Shapiro-Francia
sf.test(step_bc_planosaude$residuals) #funÃ§Ã£o sf.test do pacote nortest
#Plotando os novos resíduos do modelo step_bc_planosaude com curva normal teÃ³rica
planosaude_dummies %>%
mutate(residuos = step_bc_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_bc_planosaude$residuals),
sd = sd(step_bc_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Kernel density estimation (KDE)
planosaude_dummies %>%
ggplot() +
geom_density(aes(x = step_bc_planosaude$residuals), fill = "#440154FF") +
labs(x = "Resíduos do Modelo Stepwise com Transformação de Box-Cox",
y = "Densidade") +
theme_bw()
#DiagnÃ³stico de Heterocedasticidade para o Modelo Stepwise com Box-Cox
ols_test_breusch_pagan(step_bc_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_bc_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step_novo <- step_bc_planosaude$fitted.values
planosaude_dummies$residuos_step_novo <- step_bc_planosaude$residuals
#GrÃ¡fico que relaciona resíduos e fitted values do modelo 'step_bc_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step_novo, y = residuos_step_novo),
color = "#440154FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox",
y = "ResÃ­duos do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox") +
theme_bw()
#GrÃ¡fico que relaciona resíduos e fitted values do modelo 'step_bc_planosaude'
planosaude_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step_novo, y = residuos_step_novo),
color = "#440154FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox",
y = "Resíduos do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox") +
theme_bw()
